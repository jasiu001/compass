// Code generated by mockery v1.0.0. DO NOT EDIT.

package automock

import gqlschema "github.com/kyma-incubator/compass/components/provisioner/pkg/gqlschema"
import mock "github.com/stretchr/testify/mock"

// ProvisionerClient is an autogenerated mock type for the ProvisionerClient type
type ProvisionerClient struct {
	mock.Mock
}

// ProvisionRuntime provides a mock function with given fields: accountID, config
func (_m *ProvisionerClient) ProvisionRuntime(accountID string, config gqlschema.ProvisionRuntimeInput) (gqlschema.OperationStatus, error) {
	ret := _m.Called(accountID, config)

	var r0 gqlschema.OperationStatus
	if rf, ok := ret.Get(0).(func(string, gqlschema.ProvisionRuntimeInput) gqlschema.OperationStatus); ok {
		r0 = rf(accountID, config)
	} else {
		r0 = ret.Get(0).(gqlschema.OperationStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, gqlschema.ProvisionRuntimeInput) error); ok {
		r1 = rf(accountID, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RuntimeOperationStatus provides a mock function with given fields: accountID, operationID
func (_m *ProvisionerClient) RuntimeOperationStatus(accountID string, operationID string) (gqlschema.OperationStatus, error) {
	ret := _m.Called(accountID, operationID)

	var r0 gqlschema.OperationStatus
	if rf, ok := ret.Get(0).(func(string, string) gqlschema.OperationStatus); ok {
		r0 = rf(accountID, operationID)
	} else {
		r0 = ret.Get(0).(gqlschema.OperationStatus)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(accountID, operationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
